declare module flmml {
    class MEvent {
        private m_id;
        private m_delta;
        private m_status;
        private m_data0;
        private m_data1;
        private m_tick;
        private m_trace;
        private TEMPO_SCALE;
        private static idCounter;
        private static instances;
        static resetCounter(): void;
        static getById(id: number): MEvent;
        constructor(tick: number, trace?: any[]);
        set(status: number, data0: number, data1: number): void;
        setEOT(): void;
        setNoteOn(noteNo: number, vel: number): void;
        setNoteOff(noteNo: number, vel: number): void;
        setTempo(tempo: number): void;
        setVolume(vol: number): void;
        setNote(noteNo: number): void;
        setForm(form: number, sub: number): void;
        setEnvelope1Atk(a: number): void;
        setEnvelope1Point(t: number, l: number): void;
        setEnvelope1Rel(r: number): void;
        setEnvelope2Atk(a: number): void;
        setEnvelope2Point(t: number, l: number): void;
        setEnvelope2Rel(r: number): void;
        setNoiseFreq(f: number): void;
        setPWM(w: number): void;
        setPan(p: number): void;
        setFormant(vowel: number): void;
        setDetune(d: number): void;
        setLFOFMSF(fm: number, sf: number): void;
        setLFODPWD(dp: number, wd: number): void;
        setLFODLTM(dl: number, tm: number): void;
        setLFOTarget(target: number): void;
        setLPFSWTAMT(swt: number, amt: number): void;
        setLPFFRQRES(frq: number, res: number): void;
        setClose(): void;
        setVolMode(m: number): void;
        setInput(sens: number, pipe: number): void;
        setOutput(mode: number, pipe: number): void;
        setExpression(ex: number): void;
        setRing(sens: number, pipe: number): void;
        setSync(mode: number, pipe: number): void;
        setDelta(delta: number): void;
        setTick(tick: number): void;
        setPortamento(depth: number, len: number): void;
        setMidiPort(mode: number): void;
        setMidiPortRate(rate: number): void;
        setPortBase(base: number): void;
        setPoly(voiceCount: number): void;
        setResetAll(): void;
        setSoundOff(): void;
        setHwLfo(w: number, f: number, pmd: number, amd: number, pms: number, ams: number, s: number): void;
        getId(): number;
        getStatus(): number;
        getDelta(): number;
        getTick(): number;
        getNoteNo(): number;
        getVelocity(): number;
        getTempo(): number;
        getVolume(): number;
        getForm(): number;
        getSubForm(): number;
        getEnvelopeA(): number;
        getEnvelopeT(): number;
        getEnvelopeL(): number;
        getEnvelopeR(): number;
        getNoiseFreq(): number;
        getPWM(): number;
        getPan(): number;
        getVowel(): number;
        getDetune(): number;
        getLFODepth(): number;
        getLFOWidth(): number;
        getLFOForm(): number;
        getLFOSubForm(): number;
        getLFODelay(): number;
        getLFOTime(): number;
        getLFOTarget(): number;
        getLPFSwt(): number;
        getLPFAmt(): number;
        getLPFFrq(): number;
        getLPFRes(): number;
        getVolMode(): number;
        getInputSens(): number;
        getInputPipe(): number;
        getOutputMode(): number;
        getOutputPipe(): number;
        getExpression(): number;
        getRingSens(): number;
        getRingInput(): number;
        getSyncMode(): number;
        getSyncPipe(): number;
        getPorDepth(): number;
        getPorLen(): number;
        getMidiPort(): number;
        getMidiPortRate(): number;
        getPortBase(): number;
        getVoiceCount(): number;
        getHwLfoData(): number;
        getTrace(): any[];
    }
}
